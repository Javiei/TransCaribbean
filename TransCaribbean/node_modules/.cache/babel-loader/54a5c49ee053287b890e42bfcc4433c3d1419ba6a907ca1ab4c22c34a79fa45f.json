{"ast":null,"code":"import React,{useState}from'react';import MainPanel from'./components/MainPanel';import RouteSelection from'./components/RouteSelection';import ClientForm from'./components/ClientForm';import SuccessMessage from'./components/SuccessMessage';import ExportPanel from'./components/ExportPanel';import{jsx as _jsx}from\"react/jsx-runtime\";const App=()=>{const[currentPage,setCurrentPage]=useState('mainPanel');// 'mainPanel', 'routeSelection', 'clientForm', 'success', 'exportPanel'\nconst[selectedRoute,setSelectedRoute]=useState('');const[operationType,setOperationType]=useState('import');// 'import' or 'export'\nconst handleSelectOption=option=>{setOperationType(option);if(option==='import'){setCurrentPage('routeSelection');}else if(option==='export'){setCurrentPage('exportPanel');}};const handleSelectRoute=route=>{setSelectedRoute(route);setCurrentPage('clientForm');};const handleClientSubmit=clientData=>{console.log('Datos de factura a guardar:',{route:selectedRoute,...clientData,type:operationType});// Aquí iría la lógica para guardar en Excel/Google Sheets\nsetCurrentPage('success');};const handleBack=()=>{if(currentPage==='routeSelection'||currentPage==='exportPanel'){setCurrentPage('mainPanel');}else if(currentPage==='clientForm'){setCurrentPage('routeSelection');}else if(currentPage==='success'){setCurrentPage('mainPanel');}};const handleStartExportForm=()=>{setCurrentPage('routeSelection');};const renderPage=()=>{switch(currentPage){case'mainPanel':return/*#__PURE__*/_jsx(MainPanel,{onSelectOption:handleSelectOption});case'routeSelection':return/*#__PURE__*/_jsx(RouteSelection,{onSelectRoute:handleSelectRoute,onBack:handleBack,operationType:operationType});case'clientForm':return/*#__PURE__*/_jsx(ClientForm,{onClientSubmit:handleClientSubmit,onBack:handleBack,operationType:operationType});case'success':return/*#__PURE__*/_jsx(SuccessMessage,{onDone:handleBack});case'exportPanel':return/*#__PURE__*/_jsx(ExportPanel,{onBack:handleBack,onStartExportForm:handleStartExportForm});default:return/*#__PURE__*/_jsx(MainPanel,{onSelectOption:handleSelectOption});}};return/*#__PURE__*/_jsx(\"div\",{className:\"font-sans antialiased text-gray-900\",children:renderPage()});};export default App;","map":{"version":3,"names":["React","useState","MainPanel","RouteSelection","ClientForm","SuccessMessage","ExportPanel","jsx","_jsx","App","currentPage","setCurrentPage","selectedRoute","setSelectedRoute","operationType","setOperationType","handleSelectOption","option","handleSelectRoute","route","handleClientSubmit","clientData","console","log","type","handleBack","handleStartExportForm","renderPage","onSelectOption","onSelectRoute","onBack","onClientSubmit","onDone","onStartExportForm","className","children"],"sources":["/root/TransCaribbean/TransCaribbean/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport MainPanel from './components/MainPanel';\nimport RouteSelection from './components/RouteSelection';\nimport ClientForm from './components/ClientForm';\nimport SuccessMessage from './components/SuccessMessage';\nimport ExportPanel from './components/ExportPanel';\n\nconst App = () => {\n  const [currentPage, setCurrentPage] = useState('mainPanel'); // 'mainPanel', 'routeSelection', 'clientForm', 'success', 'exportPanel'\n  const [selectedRoute, setSelectedRoute] = useState('');\n  const [operationType, setOperationType] = useState('import'); // 'import' or 'export'\n\n  const handleSelectOption = (option) => {\n    setOperationType(option);\n    if (option === 'import') {\n      setCurrentPage('routeSelection');\n    } else if (option === 'export') {\n      setCurrentPage('exportPanel');\n    }\n  };\n\n  const handleSelectRoute = (route) => {\n    setSelectedRoute(route);\n    setCurrentPage('clientForm');\n  };\n\n  const handleClientSubmit = (clientData) => {\n    console.log('Datos de factura a guardar:', { route: selectedRoute, ...clientData, type: operationType });\n    // Aquí iría la lógica para guardar en Excel/Google Sheets\n    setCurrentPage('success');\n  };\n\n  const handleBack = () => {\n    if (currentPage === 'routeSelection' || currentPage === 'exportPanel') {\n      setCurrentPage('mainPanel');\n    } else if (currentPage === 'clientForm') {\n      setCurrentPage('routeSelection');\n    } else if (currentPage === 'success') {\n      setCurrentPage('mainPanel');\n    }\n  };\n\n  const handleStartExportForm = () => {\n    setCurrentPage('routeSelection');\n  };\n\n  const renderPage = () => {\n    switch (currentPage) {\n      case 'mainPanel':\n        return <MainPanel onSelectOption={handleSelectOption} />;\n      case 'routeSelection':\n        return <RouteSelection onSelectRoute={handleSelectRoute} onBack={handleBack} operationType={operationType} />;\n      case 'clientForm':\n        return <ClientForm onClientSubmit={handleClientSubmit} onBack={handleBack} operationType={operationType} />;\n      case 'success':\n        return <SuccessMessage onDone={handleBack} />;\n      case 'exportPanel':\n        return <ExportPanel onBack={handleBack} onStartExportForm={handleStartExportForm} />;\n      default:\n        return <MainPanel onSelectOption={handleSelectOption} />;\n    }\n  };\n\n  return (\n    <div className=\"font-sans antialiased text-gray-900\">\n      {renderPage()}\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}